.. -*- rst-mode -*-

Features
========

`PyLit` (Python-Literate) provides a plain but efficient tool for literate
programming: a bidirectional converter between 

* a *text source* with embedded code blocks and 
* a *code source* with the documentation in comment blocks.

It is written in Python_ but should work with any programming language that
provides a syntax for comment blocks. (Currently, only comments running from
a comment string to the end of line are supported.)

The following features set PyLit apart from other
`literate programming frameworks`__

__ ../literate-programming/index.html#existing-frameworks


Dual source
-----------

Text source and code source are considered equal. Both hold the full
information. 

The ``pylit.py`` script converts the text source to code source and vice
versa. Round-trips are possible without loss of information.  [#]_

.. [#] Given the ``--strip`` option, PyLit will "export" to a format by
       stripping code or text parts during the conversion.

Advantages
~~~~~~~~~~

* Work on code or documentation parts can be done in adapted editor modes or
  environments providing formatting tools, syntax highlight, outlining, and
  other conveniences.

* Debugging is straightforward (using the code format source). Fixes are
  easily passed to the text source (just calling ``pylit.py`` on the code
  source).

Limitations
~~~~~~~~~~~

* The parallel existence of code and text formats might lead to confusion on
  which is the up to date, authoritative source.

  The literate source of ``pylit.py`` has a section on `dual source
  handling`_.
  
* While by default, an output file is not overwritten if it is newer than
  the input file, loss of changes can occur when both formats are edited in
  parallel. 

* PyLit does not allow the specification of a separate output file for
  individual code blocks like e.g. noweb_. The "dual source" concept limits
  the choice to one output file per input file. However, this can be
  compensated by the use of the `include directive`_.
  See the tutorial_ for an example.

* Only one comment string (including whitespace) can be specified as
  "text block marker". 
  
  It would be possible to specify a list of matching comment strings (or
  a regular expression), however as the comment string is not stored in
  the text source, all text blocks will get one common comment string if
  (re)converted to code source -- possibly loosing vital information.


Simplicity
----------

Pylit is a `pure Python module`__, i.e.  a module written in Python and
contained in a single .py file.

PyLit converts between a "text document with embedded code" and "commented
code" but does not provide code re-ordering or multiple expansion of
definitions. Some call this `semi-literate programming`_.

Doing without "named chunks" reduces the complexity of the program and
enables a line-by-line correspondence between text source and code source.

__ http://python.org/doc/2.2.3/dist/simple-example.html#SECTION000220000000000000000
.. _semi-literate programming: ../literate-programming/index.html#semi-literate


reStructured Text
-----------------

PyLit uses `reStructured Text`_ from Python Docutils_ for hyperlinks and
text markup. [#]_

* reStructured Text is an "ASCII-markup" language. Its syntax is very similar
  to common conventions used to structure "ASCII text" like e.g. emails.
  Thus it is more easy to read and to edit in a text editor than e.g. TeX,
  HTML, or XML.

* reStructured Text is well documented, and actively maintained.

* Special editor modes for editing reStructuredText already exist (see
  `Editor Support for reStructuredText`_.) 

* With Docutils_, the text source can be converted to a nice looking,
  hyper-linked, browsable HTML documentation as well as to a LaTeX document 
  (and with pdflatex further to a printer-ready PDF manual).

Most of the time, a programmer will see the source in a "text editor". With
reStructured Text as documenting language, not only the pretty printed
documentation, but also the source (be it in "text" or "code" format) is a
"combination of documentation and source together in a fashion suited for
reading by human beings", i.e. a *literate program* according to the
"inclusive" definition in the `Literate Programming FAQ`_.

The tutorial_ and the examples_ show what code and text source may look like.

.. [#] Actually, only the syntax for literal blocks is needed for PyLit to
       convert from text to code. If no pretty-printed or web-ready document
       is desired, the programmer does not need to know anything else about
       reStructured Text.


Python Doctests
---------------

Pylit supports `Python doctests`_ in a literate script. For details see the
`literate doctests example`_.


.. References:

.. _Docutils: http://docutils.sourceforge.net/rst.html
.. _reStructuredText: http://docutils.sourceforge.net/rst.html
.. _Python: http://www.python.org
.. _`Editor Support for reStructuredText`:
      http://docutils.sourceforge.net/tools/editors/README.html
.. _Literate Programming FAQ: http://www.literateprogramming.com/lpfaq.pdf
.. _dual source handling: examples/pylit.py.html#dual-source-handling
.. _rest2web: http://www.voidspace.org.uk/python/rest2web/
.. _tutorial: ../tutorial/index.html
.. _examples: ../examples/index.html
.. _noweb: http://www.eecs.harvard.edu/~nr/noweb/
.. _include directive:
     http://docutils.sourceforge.net/docs/ref/rst/directives.html#including-an-external-document-fragment

.. _Python doctests: http://docs.python.org/lib/module-doctest.html
.. _literate doctests example: ../examples/literate-doctests/index.html
