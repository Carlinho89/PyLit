.. -*- rst-mode -*-
.. 
  restindex
      crumb: Highlights
      page-title: Pylit - Features - Syntax Highlight
      file: rst2html-pygments
      file: rst2latex-pygments
      file: for-else-test.py.txt
      file: for-else-test.py.tex
      file: for-else-test.py.pdf
      file: for-else-test.py.html
      file: pygments-default.css
  /restindex

.. sectnum::
.. contents::

Syntax Highlight
----------------

Syntax highlighting significantly enhances the readability of code.
So it is almost a must for pretty-printing a literate program.

PyLit uses docutils_ as pretty-printing back end. However, in the current
version, docutils does not highlight literal blocks. This may change in the
future, as in a mail on
`Questions about writing programming manuals and scientific documents`__,
docutils main developer David Goodger wrote:

   I'd be happy to include Python source colouring support, and other
   languages would be welcome too. A multi-language solution would be
   useful, of course. My issue is providing support for all output formats
   -- HTML and LaTeX and XML and anything in the future -- simultaneously.
   Just HTML isn't good enough. Until there is a generic-output solution,
   this will be something users will have to put together themselves.

__ http://sourceforge.net/mailarchive/message.php?msg_id=12921194


There are already such add-ons providing syntax colouring. E.g 

* the rest2web_ site builder provides the `colorize`__ macro (using the
  `Moin-Moin Python colorizer`_) 

* the Odtwriter_ for Docutils supports syntax colours via the pygments_
  generic syntax highlighter.

__ http://www.voidspace.org.uk/python/rest2web/macros.html#colorize

* the `listings`_ LaTeX package provides highly customisable and advanced
  syntax highlight, though only for the LaTeX (and LaTeX derived PS|PDF)
  rendering.

* `Pygments`_ a generic syntax highlighter for general use. 

  * It is written completely in Python, usable as a command-line tool and as a
    Python package.
  * A wide range of common `languages and markup formats`_ is supported.
  * The layout is configurable by style sheets.
  * Several built-in styles and an option for line-numbering.
  * Built-in output formats include HTML, LaTeX, and rtf.
  * Support for new languages, formats, and styles is added easily (modular
    structure, Python code, existing documentation).
  * Well documented and actively maintained.
  * There is a recipe for `using Pygments in ReST documents`_.

Pygments seems to be the most promising docutils highlighter.


Pygments enhanced docutils front-ends
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The example code in "`Using Pygments in ReST documents`_" defines a new
"sourcecode" directive.  The directive takes one argument `language` and
uses the `Pygments`_ source highlighter to parse and render its content as a
literal block with syntax colour. 

Example::

  .. sourcecode:: python
     
     def hello():
         print "hello world"

Combining the pygments_ example code with the standard docutils_ front-ends,
results in front-end scripts generating pretty-print with syntax highlight: 

`rst2html-pygments`_ 
  enhances the standard docutils ``rst2html`` front-end to
  generate a HTML rendering with syntax highlight. 
  
`rst2latex-pygments`_ 
  enhances docutils' ``rst2latex`` to generate LaTeX with syntax highlight.

Advantages:
  + Easy implementation with no changes needed for the stock docutils_. 
  + Separation of code blocks and ordinary literal blocks.

Disadvantage:
  - more "invasive" markup distracting from content
  - no "minimal" code block marker -- three additional lines per code block

The disadvantages become a real issue in literate programming where a code
block is expected to be the most used block markup.

Examples
""""""""

example Python script: 
  `for-else-test`_ investigates the command flow in a Python
  ``for ... else`` construct.
  
  :text source: `for-else-test.py.txt`_
  :HTML:   `for-else-test.py.html`_
  :LaTeX:  `for-else-test.py.tex`_
  :PDF:    `for-else-test.py.pdf`_

Stylesheets:
  :CSS stylesheet:  `pygments-default.css`_
  :LaTeX style:     `pygments-default.sty`_


To support this way of syntax highlight, the PyLit converter would need a
configurable "code block marker" instead of the hard coded double colon
(``::``) presently in use. (See also the `sourcecode directive`__ section in
pylit.py.)

__ ../examples/pylit.py.html#sourcecode-directive


Odtwriter syntax
~~~~~~~~~~~~~~~~

Dave Kuhlmans odtwriter_ extension can add Python syntax highlighting
to ordinary literal blocks.

The ``--add-syntax-highlighting`` command line flag activates syntax
highlighting in literal blocks. By default, the "python" lexer is used.

You can change this within your reST document with the `sourcecode`
directive::
  
  .. sourcecode:: off
  
  ordinary literal block::
  
     content set in teletype

  .. sourcecode:: on
  .. sourcecode:: python
     
  colourful Python code::
     
     def hello():
         print "hello world"


The "sourcecode" directive defined by the odtwriter is principally
different from the "sourcecode" directive of ``rst2html-pygments``:
  
* The odtwriter directive does not have content. It is a switch.

* The syntax highlighting state and language/lexer set by this directive
  remain in effect until the next sourcecode directive is encountered in the
  reST document.
  
  ``.. sourcecode:: <newstate>`` 
       make highlighting active or inactive. 
       <newstate> is either ``on`` or ``off``.
  
  ``.. sourcecode:: <lexer>`` 
       change the lexer parsing literal code blocks.
       <lexer> should be one of aliases listed at pygment's `languages and
       markup formats`_.

   
The advantage of this approach is the clean and simple syntax for code
blocks -- preserving the space saving feature of the "minimised" literal
block marker (``::`` at the end of a text paragraph). This is especially
handy in literate programs where there are many sourcecode blocks!


Alternative syntax proposal
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ideas for a revised highlighting syntax based on the one in the
odtwriter:

* A *command line option* ``--syntax-highlight=LEXER`` 
  tells the writer to apply syntax highlight to literal blocks.

* Turn of syntax highlight with ``--syntax-highlight=off`` or
  ``--no-syntax-highlight``.
  
* The corresponding *directive* should also be named "syntax-highlight"
  (instead of "sourcecode") because:
  
  * it makes the relationship of command line option and directive more
    transparent,
    
  * The name "sourcecode" leads me to assume that the directive
    contains source code that should be treated specially. It's a
    surprise to realise that the odtwriter's "sourcecode" directive
    is a switch without content.
    
  * it disambiguates from the name proposed in `Using Pygments in ReST
    documents`_.
  
  * with Pygments you can highlight not only source code but also
    config files and markup languages,
    
  Example::
  
    .. syntax-highlight:: off
    
    ordinary literal block::
    
       typeset in monospace
  
    .. syntax-highlight:: python
       
    colourful Python code::
       
       def hello():
           print "hello world"
    

  Instead of a dedicated "syntax-highlight" directive, a settings
  key could be employed together with the upcoming "settings" directive.

  Example::

    .. settings::
       :syntax-highlight: bash
     

* The syntax highlighting state and language/lexer set by this
  directive remain in effect until the next "syntax-highlight" directive
  is encountered in the reST document.
  
* In contrast to the current odtwriter, there is no "on" argument:
  
  ``.. syntax-highlight:: LEXER`` 
       makes highlighting active and sets the Pygments lexer to use.
  
  ``.. syntax-highlight:: off`` 
       turns off highlighting of literal blocks

  In order to turn syntax highlighting on and set the
  lexer, you will need to use this directive only once.


     
Configurable literal block directive
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An even more flexible alternative would be to make the default "literal block"
role configurable.

* Define a new "literal" directive for an ordinary literal block
  (doctree element "literal-block" with no parsing)

* Define a "literal-block" setting that controls which directive is called
  on a block following ``::``. Default would be the "literal" directive.
  
  Alternatively, define a new "default-literal-block" directive instead of
  a settings key.

Analogue to customising the default role of "interpreted text" with
the "default-role" directive, the concise literal-block markup could be
used for e.g.

* the "line-block" directive for poems or addresses

* the "parsed-literal" directive

* a "sourcecode" directive for colourful code 
  (analog to the one in the `pygments enhanced docutils front-ends`_)

* a "listing" directive for the `listings`_ environment in LaTeX

Example::

  ordinary literal block::
  
     some text typeset in monospace

  .. settings::
     :literal-block:  sourcecode python
     
  colourful Python code::
     
     def hello():
         print "hello world"

  
In the same line, a "default-block-quote" setting or directive could be
considered to configure the role of a block quote.


.. _docutils: http://docutils.sourceforge.net/
.. _rest2web: http://www.voidspace.org.uk/python/rest2web/
.. _Moin-Moin Python colorizer:
     http://www.standards-schmandards.com/2005/fangs-093/
.. _odtwriter: http://www.rexx.com/~dkuhlman/odtwriter.html
.. _pygments: http://pygments.org/
.. _listings: http://tug.ctan.org/tex-archive/macros/latex/contrib/listings/
.. _languages and markup formats: http://pygments.org/languages
.. _Using Pygments in ReST documents: http://pygments.org/docs/rstdirective/

.. _rst2html-pygments: rst2html-pygments
.. _rst2latex-pygments: rst2latex-pygments
.. _for-else-test:
.. _for-else-test.py.html: for-else-test.py.html
.. _for-else-test.py.txt: for-else-test.py.txt
.. _for-else-test.py.tex: for-else-test.py.tex
.. _for-else-test.py.pdf: for-else-test.py.pdf
.. _pygments-default.css: pygments-default.css
.. _pygments-default.css.txt: pygments-default.css.txt
.. _pygments-default.css.html: pygments-default.css.html
.. _pygments-default.sty: pygments-default.sty
