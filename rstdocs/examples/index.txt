.. -*- rst-mode -*-
.. 
  restindex
      crumb: Examples
      page-title: Pylit - Examples
  /restindex

Examples
========

The following examples illustrate use cases for "literate programming with
PyLit".

.. contents::

User scripts
------------

Generally, the literate source will not substitute a user guide, but can
serve as base documentation as well as a reference.

The text parts can be used to structure the script, for additional
explanations, documentation of variants and discussion why a specific
approach was chosen.

`pylit <pylit.py.html>`__
  is a script intended for the "end user". Both, command line
  and programmatic use is possible. 
  
  Sources: `<pylit.py>`_, `<pylit.py.txt>`_


`99bottles <99bottles.py.html>`__
  This is used as an introductory example to literate programming
  in the `LiteratePrograms.org Wiki`_. Riccardo Murri wrote a Python
  implementation.
  
  Sources: `<99bottles.py>`_, `<99bottles.py.txt>`_

.. _LiteratePrograms.org Wiki: 
     http://en.literateprograms.org/LiteratePrograms:Welcome
  
Python modules
--------------

Typically, most of a Python module's documentation is in docstrings as it
should be available by pydoc_ (the Python help and module browser utility).
Currently, docstrings are treated as code parts by PyLit.

However, literate comments can be used to add structure and documentation
that is not intended for the end user of a module but for people trying to
maintain or extend it (including the original author). Switching to the
"text source" representation of the module greatly facilitates the writing
of such "literate comments".

.. _pydoc: http://docs.python.org/lib/module-pydoc.html

`simplestates <simplestates.py.html>`__
  is a module providing the state machine used in earlier PyLit versions.

  Sources: `<simplestates.py>`_, `<simplestates.py.txt>`_


Articles
--------
  
`iterqueue <iterqueue.py.html>`__
  is a survey over the various options and attempts to extend
  an iterator with methods for `peek`, `pushback` or `test of emptiness`.

  It is also a Python module defining several examples of such rich
  iterators.

  Sources: `<iterqueue.py>`_, `<iterqueue.py.txt>`_.


Doctests
--------

Python's `doctest`_ module runs tests on usage examples.
However, running ``doctest`` on the code source will only run doctests
within docstrings. In contrast, ``pylit --doctest`` will detect all
doctests, in docstrings as well as in text blocks. 

This way, the docstrings can be kept concise and to the point while at the
same time comprehensive tests can be placed in the code file without
resulting in bloated docstrings taking up precious resources and loading
time (as they will be stripped from the byte-compiled module).

As the code source is not loaded automatically when the file is tested with
``pylit --doctest``, a leading doctest block must import the module before
any of its objects can be used. An elegant solution is to give a usage
example in the module's docstring or leading comment. 

`literate doctests`_ provides more details and two examples:

  
`testmod_literate.py`_
   Literate example module with self-test (if run as ``__main__``) using
   `pylit.run_doctest`.

`testfile_literate.py`_ 
   
   Literate example module tested by calling 
   ``pylit --doctest testfile_literate.py`` or 
   ``pylit --doctest testfile_literate.py.txt``.
   
   It imports itself in the usage example and has a non-testing (albeit
   silly) default action if called from the command line.


.. _doctest: http://docs.python.org/lib/module-doctest.html
.. _literate doctests:    literate-doctests/index.html
.. _testmod_literate.py: literate-doctests/testmod_literate.py
.. _testfile_literate.py: literate-doctests/testfile_literate.py

Test scripts
------------

Test suites are a good example for the advantages of literate programming.
Documenting the rationale and design as well as test considerations can help
a lot when maintaining and extending the tests.

The following unit test modules are tested using the nose_ unit
test discovery & execution framework. (They should be compatible to
`py.test`_.)

.. _nose: http://somethingaboutorange.com/mrl/projects/nose/
.. _py.test: http://codespeak.net/py/current/doc/test.html


`simplestates_test <simplestates_test.py.html>`__
  is not a unit test module for simplestates.py, that also
  defines and tests variants of the state machine class.

  Sources: `<simplestates_test.py>`_, `<simplestates_test.py.txt>`_.


`pylit_test <pylit_test.py.html>`__
  contains the unit tests for the ``pylit.py`` text <--> code converter

  Sources: `<pylit_test.py>`_, and `<pylit_test.py.txt>`_.
   

`iterqueue_test <iterqueue_test.py.html>`__
  tests the functionality of the iterator wrapper classes defined in
  `iterqueue.py`
  
  Sources: `<iterqueue_test.py>`_, `<iterqueue_test.py.txt>`_.

   
`iterqueue_speed_test <iterqueue_speed_test.py.html>`__
  Profiling of the iterator wrapper classes defined in
  `iterqueue.py`
  
  Sources: `<iterqueue_speed_test.py>`_, `<iterqueue_speed_test.py.txt>`_


Tutorials
---------

A tutorial is clearly more of a text document than a program. But usually, a
lot of example code gets included. Converting the text source to commented
code, it is easier to copy or paste code examples to and from scripts or an
interactive program session. Re-converting indents the code snippets
correctly so they will be literal blocks in the pretty print.

In Python, code examples can be given as both, code blocks and doctest_
blocks.  With a 'usage' example that imports the code source as module,
doctest blocks can also test examples from literal code blocks.

`swiginac_tutorial`_
  is an adaption of the `GiNaC tutorial`_ for doing Computer algebra with
  GiNaC_ and the Python programming language using the swiginac_ wrapper
  package.
  
  It is work in progress, not completed yet.

  Sources are in the `documentation folder`__ of the swiginac SVN repository.

__ http://svn.berlios.de/svnroot/repos/swiginac/trunk/doc/

.. _swiginac_tutorial: 
    http://svn.berlios.de/svnroot/repos/swiginac/trunk/doc/swiginac_tutorial.py.html
.. _GiNaC tutorial: http://www.ginac.de/tutorial/
.. _GiNaC: http://www.ginac.de
.. _swiginac: http://swiginac.berlios.de

LaTeX packages
--------------

The "orthogonal" syntax of reStructuredText and LaTeX makes the documentation
of a LaTeX package in the source document far more readable than using LaTeX
markup.

`listings-python-options <listings-python-options.sty.html>`__ 
  sets up the listings environment for literate Python scripts. Using this
  together with the ``--stylesheet=listings-python-options.sty`` and
  ``--literal-block-env=lstlisting`` options to ``rst2latex.py`` results in
  syntax-highlight for literal blocks in the latex (and PDF via LaTeX)
  output.
  
  Sources: `<listings-python-options.sty>`_, `<listings-python-options.sty.txt>`_

`listings-tex-options <listings-tex-options.sty.html>`__
  sets up the listings environment for literate LaTeX packages. Use with 
  ``--stylesheet=listings-tex-options.sty --literal-block-env=lstlisting``
  
  Sources: `<listings-tex-options.sty>`_, `<listings-tex-options.sty.txt>`_

`isomath <isomath.sty.html>`__
  is a LaTeX package for typesetting math according to International
  Standard ISO 31 `Quantities and units`.
      
  Sources: `<isomath.sty>`_, `<isomath.sty.txt>`_
  
  PDF: `<isomath.sty.pdf>`_
  
  Testfile: `<isomath-test.tex>`_


Style sheets
------------

Also cascading style sheets can gain from being made literate documents.

`pygments-default <pygments-default.css.html>`__
  is a style sheet that provides colour to code blocks.
  
  Sources: `<pygments-default.css>`_, `<pygments-default.css.txt>`_

Configuration files
-------------------

An interesting use case will be configuration files. Generating a template
as well as user documentation from the same source helps to keep them
synchronised.



