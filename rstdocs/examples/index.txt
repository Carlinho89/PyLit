.. -*- rst-mode -*-

Examples
========

The following examples illustrate use cases for "literate programming with
PyLit".

.. Currently, the "code" format examples are not copied to the build tree.

   This has to be done "by hand" :-(

   This will be possible with the next version of Sphinx (0.6).

   zopyxfil...@googlemail.com schrieb:

   > I have a PDF file within my source directory that is referenced from
   > within a reST document.
   > How can I configure Sphinx in order  "make html" copying over the PDF
   > to the build directory?

   The best way is to use Sphinx 0.6 (which is not yet released, but you can
   use it from Mercurial, like described in
   http://bitbucket.org/birkenfeld/sphinx/wiki/Home, or wait for the release
   which will be in a few days).  There, you have a :download: role which
   references a file in the source directory and automatically copies it to
   the build directory, linking to the correct path.

   Georg



User Scripts
------------

Generally, the literate source will not substitute a user guide, but can
serve as base documentation as well as reference.

The text parts can be used to structure the script, for additional
explanations, documentation of variants and discussion why a specific
approach was chosen.

.. toctree::
  :maxdepth: 2

  pylit.py
  99bottles.py


.. Sources:
  `<pylit.py>`_, `<pylit.py.txt>`_,
  `<99bottles.py>`_, `<99bottles.py.txt>`_

Python Module
--------------

Typically, most of a Python module's documentation is in docstrings.
Currently, docstrings are treated as code parts by PyLit.

However, literate comments can be used to add structure and documentation
that is not intended for the end user of a module but for people trying to
maintain or extend it (including the original author).

.. toctree::
  :maxdepth: 2

  simplestates.py

.. Sources:
  `<simplestates.py>`_, `<simplestates.py.txt>`_


Article
--------

This survey over the various options and attempts to extend an iterator with
methods for `peek`, `pushback` or `test of emptiness` is also a Python
module defining several examples of such rich iterators.

.. toctree::
  :maxdepth: 1

  iterqueue.py
  
.. Sources: 
  `<iterqueue.py>`_, `<iterqueue.py.txt>`_.


Doctests
--------

Python's `doctest`_ module runs tests on usage examples.
However, running ``doctest`` on the code source will only run doctests
within docstrings. In contrast, ``pylit --doctest`` will detect all
doctests, in docstrings as well as in text blocks.

This way, the docstrings can be kept concise while comprehensive tests can
be placed in the code file without taking up precious resources and loading
time (as they will be stripped from the byte-compiled module).

.. toctree::
   :maxdepth: 1

   literate-doctests

.. _doctest: http://docs.python.org/library/doctest.html

Test Scripts
------------

Test suites are a good example for the advantages of literate programming.
Documenting the rationale and design as well as test considerations can help
a lot when maintaining and extending the tests.

The following unit test modules are tested using the nose_ unit
test discovery & execution framework. (They should be compatible to
`py.test`_.)

.. _nose: http://somethingaboutorange.com/mrl/projects/nose/
.. _py.test: http://codespeak.net/py/dist/doc/test.html

.. toctree::
  :maxdepth: 2

  pylit_test.py
  simplestates_test.py
  iterqueue_test.py
  iterqueue_speed_test.py

.. Sources: 
  `<pylit_test.py>`_, `<pylit_test.py.txt>`_.
  `<simplestates_test.py>`_, `<simplestates_test.py.txt>`_.
  `<iterqueue_test.py>`_, `<iterqueue_test.py.txt>`_.
  `<iterqueue_speed_test.py>`_, `<iterqueue_speed_test.py.txt>`_


Tutorials
---------

A tutorial is clearly more of a text document than a program. But usually, a
lot of example code gets included. Converting the text source to commented
code, it is easier to copy or paste code examples to and from scripts or an
interactive program session. Re-converting indents the code snippets
correctly so they will be literal blocks in the pretty print.

In Python, code examples can be given as both, code blocks and doctest_
blocks.  With a 'usage' example that imports the code source as module,
doctest blocks can also test examples from literal code blocks.

* `swiginac_tutorial`_

  + An adaption of the `GiNaC tutorial`_ for doing Computer algebra with
    GiNaC_ and the Python programming language using the swiginac_ wrapper
    package. (incomplete.)
  
  + Sources are in the `documentation folder`__ of the swiginac SVN
    repository. 

.. _swiginac_tutorial:
    http://svn.berlios.de/svnroot/repos/swiginac/trunk/doc/swiginac_tutorial.py.html
.. _GiNaC tutorial: http://www.ginac.de/tutorial/
.. _GiNaC: http://www.ginac.de
.. _swiginac: http://swiginac.berlios.de

LaTeX Packages
--------------

The "orthogonal" syntax of reStructuredText and LaTeX makes the documentation
of a LaTeX package in the source document far more readable than using LaTeX
markup.

.. toctree::
  :maxdepth: 2

  listings-python-options.sty
  listings-tex-options.sty
  palatino-helvetica-courier.sty

.. Sources: 
  `<listings-python-options.sty>`_, `<listings-python-options.sty.txt>`_
  `<listings-tex-options.sty>`_, `<listings-tex-options.sty.txt>`_
  

* isomath_: Math for scientists

  + LaTeX package for typesetting math according to International
    Standard ISO 31 `Quantities and units`.
  
  + Sources: isomath.sty_, isomath.sty.txt_

  + PDF: isomath.sty.pdf_

.. _isomath:
   http://dante.ctan.org/CTAN/macros/latex/contrib/isomath/isomath.sty.html
.. _isomath.sty.pdf:
   ftp://dante.ctan.org/tex-archive/macros/latex/contrib/isomath/isomath.sty.pdf
.. _isomath.sty:
   ftp://dante.ctan.org/tex-archive/macros/latex/contrib/isomath/isomath.sty
.. _isomath.sty.txt:
   ftp://dante.ctan.org/tex-archive/macros/latex/contrib/isomath/isomath.sty.txt

CSS Style Sheets
----------------

Also cascading style sheets can gain from being made literate documents.

.. toctree::
  :maxdepth: 1

  pygments-default.css

.. Sources: `<pygments-default.css>`_, `<pygments-default.css.txt>`_

Configuration Files
-------------------

Generating a template as well as user documentation from the same
config-file source helps to keep them synchronised.
