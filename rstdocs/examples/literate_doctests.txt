.. -*- rst-mode -*-
.. 
  restindex
      crumb: Tutorial
      page-title: PyLit - Tutorial
      file: testmod_literate.py
      file: testfile_literate.py
  /restindex

How to write literate doctests with PyLit
=========================================

.. sectnum::
.. contents::

Doctest and PyLit
-----------------

*Doctests* are a literate way of testing a Python script.  They are
supported by the `doctest block`_ syntax in reStructured Text.

The `doctest module`_ searches strings for pieces of text that look like
interactive Python sessions, and then executes those sessions to verify that
they work exactly as shown.

* The most common way to use the doctest module is to check examples in all
  *docstrings* of a module with ``doctest.testmod()``, e.g. ::
  
    if __name__ == "__main__":
        import doctest
        doctest.testmod()
  
* You can also check a *text* file as if it were a docstring by calling
  doctest from the command line, e.g. ::

    python -c "import doctest; doctest.testfile('example.py.txt')"
  
However, both methods will not check doctest blocks in comments. 
This is why they will fail to find doctests in the text blocks of a source
in code format (say ``example.py``). (See the tutorial_ for discussion.)

You can of course convert your source to text form and run doctest on it,
but there is an option to facilitate literal doctests:

``pylit --doctest``
  will check a literate source file for all doctests regardless of their
  location in docstrings or text parts. It can work with both, text or code
  format.
  
  In order to do this, it will read the file, transform a code source to
  text format on-the-fly and feed the result to a DocTestParser_ object.

This way, it is possible to separate basic examples in doc strings from
additional test in the literate source.


Checking Examples in Docstrings and Documentation text
------------------------------------------------------

testmod_literate.py_ 
  is a "literate version" of the example in the `doctest module`_ doc that
  does a self test when called as `__main__`.
  
  It calls `pylit.run_doctest` to find tests in both docstrings and
  documentation blocks. 
  
  Test this file with::
  
     sh> python testmod_literate.py
     0 failures in 14 tests


Checking Examples in a Literal Source File
--------------------------------------------------------

testfile_literate.py_
  is a "literate version" of the example in the `doctest module`_ doc
  adapted for beeing tested with ``pylit --doctest``.
  
  Test this file with::
  
     sh> pylit --doctest testfile_literate.py
     0 failures in 19 tests
     

.. References
   ==========

.. _doctest module:
.. _Python doctests: http://docs.python.org/lib/module-doctest.html
.. _DocTestParser: http://docs.python.org/lib/doctest-DocTestParser.html
.. _Advanced API: http://docs.python.org/lib/doctest-advanced-api.html

.. _tutorial: /tutorial/
.. _testmod_literate.py: testmod_literate.py
.. _testfile_literate.py: testfile_literate.py


.. _parsed-literal block: 
    http://docutils.sf.net/docs/ref/rst/directives.html#parsed-literal-block
.. _doctest block: 
    http://docutils.sf.net/docs/ref/rst/restructuredtext.html#doctest-blocks


